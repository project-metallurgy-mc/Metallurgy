buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Forge Maven'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'ParchmentMC Maven'
            url = 'https://maven.parchmentmc.org'
        }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = '0.1'
group = 'projectmetallurgy.metallurgy'
archivesBaseName = 'Metallurgy-MC1.18.2'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '2022.03.13-1.18.2'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'metallurgy'
            mods { metallurgy { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'metallurgy'
            mods { metallurgy { source sourceSets.main } }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'metallurgy'
            mods { metallurgy { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'metallurgy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { metallurgy { source sourceSets.main } }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.52'

    implementation(fg.deobf('curse.maven:ldlib-626676:3888721'))
    implementation(fg.deobf('curse.maven:geckolib-388172:3885204'))
    implementation fg.deobf('curse.maven:multiblocked-604054:3888388')
    implementation fg.deobf('curse.maven:forgeendertech-244844:3777164')
    runtimeOnly fg.deobf('curse.maven:large-ore-deposits-318833:3698796')
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "metallurgy",
                "Specification-Vendor"    : "projectMetallurgy",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications { mavenJava(MavenPublication) { artifact jar } }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
task("genPlaceholderThings"){
    def cmd = "java --version"
    cmd.execute()
}
tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
